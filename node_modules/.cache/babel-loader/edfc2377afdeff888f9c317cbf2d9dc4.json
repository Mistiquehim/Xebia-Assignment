{"ast":null,"code":"import axios from 'axios';\nexport const LOGIN = 'LOGIN';\nexport const SEARCH_PLANET_SUCCESS = 'SEARCH_PLANET_SUCCESS';\nexport const SEARCH_PLANET_FAILURE = 'SEARCH_PLANET_FAILURE';\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport const LOGIN_FAILURE = 'LOGIN_FAILURE';\nexport const UPDATE_PROGRESS = 'UPDATE_PROGRESS';\n\nconst updateProgress = data => {\n  return {\n    type: UPDATE_PROGRESS,\n    data\n  };\n};\n\nconst loginSuccess = data => {\n  return {\n    type: LOGIN_SUCCESS,\n    data\n  };\n};\n\nconst loginFailure = data => {\n  return {\n    type: LOGIN_FAILURE,\n    data\n  };\n};\n\nconst searchSuccess = data => {\n  return {\n    type: SEARCH_PLANET_SUCCESS,\n    data\n  };\n};\n\nconst searchFailure = data => {\n  return {\n    type: SEARCH_PLANET_FAILURE,\n    data\n  };\n};\n\nexport const loginRequest = data => {\n  return dispatch => {\n    let {\n      username,\n      password\n    } = data;\n    dispatch(updateProgress({\n      isSpinner: true,\n      text: 'Logging in...'\n    }));\n    axios.get('https://swapi.dev/api/people', {\n      params: {\n        search: username\n      }\n    }).then(function (response) {\n      let resData = response.data;\n      let alertText = 'Username or password is incorrect';\n\n      if (resData && resData.results && resData.results.length > 0) {\n        let user = resData.results[0];\n\n        if (user.name === username && user.birth_year === password) {\n          dispatch(loginSuccess({\n            success: true,\n            message: 'Login Successful'\n          }));\n          return;\n        }\n      }\n\n      dispatch(loginFailure({\n        success: false,\n        showAlert: true,\n        alertText\n      }));\n    }).catch(function (error) {\n      dispatch(loginFailure({\n        success: false,\n        showAlert: true,\n        alertText: error\n      }));\n    });\n  };\n};\nexport const searchPlanet = text => {\n  return dispatch => {\n    dispatch(updateProgress({\n      isSpinner: true,\n      text: 'Searching...'\n    }));\n    axios.get('https://swapi.dev/api/planets', {\n      params: {\n        search: text\n      }\n    }).then(function (response) {\n      console.log(response);\n      let data = response.data;\n\n      if (data && data.results && data.results.length > 0) {\n        dispatch(searchSuccess({\n          success: true,\n          results: data.results\n        }));\n      } else {\n        dispatch(searchFailure({\n          success: false,\n          message: 'No data found'\n        }));\n      }\n    }).catch(function (error) {\n      dispatch(searchSuccess({\n        success: false,\n        message: error\n      }));\n    });\n  };\n};","map":{"version":3,"sources":["C:/Users/negih/Desktop/Project/XebiaStarWarAssignment/star-war-app/src/redux/actions/index.js"],"names":["axios","LOGIN","SEARCH_PLANET_SUCCESS","SEARCH_PLANET_FAILURE","LOGIN_SUCCESS","LOGIN_FAILURE","UPDATE_PROGRESS","updateProgress","data","type","loginSuccess","loginFailure","searchSuccess","searchFailure","loginRequest","dispatch","username","password","isSpinner","text","get","params","search","then","response","resData","alertText","results","length","user","name","birth_year","success","message","showAlert","catch","error","searchPlanet","console","log"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\n\r\nexport const LOGIN = 'LOGIN';\r\nexport const SEARCH_PLANET_SUCCESS = 'SEARCH_PLANET_SUCCESS';\r\nexport const SEARCH_PLANET_FAILURE = 'SEARCH_PLANET_FAILURE';\r\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\r\nexport const LOGIN_FAILURE = 'LOGIN_FAILURE';\r\nexport const UPDATE_PROGRESS = 'UPDATE_PROGRESS';\r\n\r\nconst updateProgress = (data) => {\r\n    return {\r\n        type: UPDATE_PROGRESS,\r\n        data\r\n    }\r\n}\r\n\r\nconst loginSuccess = (data) => {\r\n    return {\r\n        type: LOGIN_SUCCESS,\r\n        data\r\n    }\r\n}\r\n\r\nconst loginFailure = (data) => {\r\n    return {\r\n        type: LOGIN_FAILURE,\r\n        data\r\n    }\r\n}\r\n\r\nconst searchSuccess = (data) => {\r\n    return {\r\n        type: SEARCH_PLANET_SUCCESS,\r\n        data\r\n    }\r\n}\r\n\r\nconst searchFailure = (data) => {\r\n    return {\r\n        type: SEARCH_PLANET_FAILURE,\r\n        data\r\n    }\r\n}\r\n\r\nexport const loginRequest = (data) => {\r\n    return (dispatch) => {\r\n        let { username, password } = data;\r\n        dispatch(updateProgress({ isSpinner: true, text: 'Logging in...' }));\r\n        axios.get('https://swapi.dev/api/people', {\r\n            params: {\r\n                search: username\r\n            }\r\n        })\r\n            .then(function (response) {\r\n                let resData = response.data;\r\n                let alertText = 'Username or password is incorrect';\r\n                if (resData && resData.results && resData.results.length > 0) {\r\n                    let user = resData.results[0];\r\n                    if (user.name === username && user.birth_year === password) {\r\n                        dispatch(loginSuccess({ success: true, message: 'Login Successful' }));\r\n                        return;\r\n                    }\r\n                }\r\n                dispatch(loginFailure({ success: false, showAlert: true, alertText }));\r\n\r\n            })\r\n            .catch(function (error) {\r\n                dispatch(loginFailure({ success: false, showAlert: true, alertText: error }));\r\n            });\r\n    }\r\n}\r\n\r\nexport const searchPlanet = text => {\r\n    return (dispatch) => {\r\n        dispatch(updateProgress({ isSpinner: true, text: 'Searching...' }));\r\n        axios.get('https://swapi.dev/api/planets', {\r\n            params: {\r\n                search: text\r\n            }\r\n        })\r\n            .then(function (response) {\r\n                console.log(response);\r\n                let data = response.data;\r\n                if (data && data.results && data.results.length > 0) {\r\n                    dispatch(searchSuccess({ success: true, results: data.results }));\r\n                }\r\n                else {\r\n                    dispatch(searchFailure({ success: false, message: 'No data found' }));\r\n                }\r\n            })\r\n            .catch(function (error) {\r\n                dispatch(searchSuccess({ success: false, message: error }));\r\n            });\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}